# -*- coding: utf-8 -*-
"""FlaskPnemonia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hr4wjEb6hs2lBwiOzhi4owcNPIwZo9Jt

#**Creating New Folders**
"""

import os
os.mkdir('templates')

import os
os.mkdir('static')

"""# **Upload Weights**"""

from google.colab import files
fil=files.upload()

"""# **Necessary Installations**"""

!pip install flask-ngrok

"""# **Front-end HTML Files**"""

disease='''
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width,initial-scale=1.0">
	<title>Test for Pnemonia</title>
 
 <style>
+
</style>
</head>

<body>
<center><h1 style="color:Orange;"> Test for Pnemonia</h1></center>
<form action="{{url_for('predict')}}" method="post" enctype="multipart/form-data">
	<center><h2 style="color:#c1b24a;">Select Image to upload:</h3> </center>
	<center><input type ="file" name="file"></center>
	<br><br>
	<center><input type ="submit" value="Upload Image" name="submit"></center>
</form>
<br>
<div>
<center><h2 style="color:IndianRed;">{{prediction_text}}</h2></center>
</div>
</body>
</html>
'''
file=open("templates/disease.html","w")
file.write(disease)
file.close()

diseases='''
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width,initial-scale=1.0">
	<title>Test for Pnemonia</title>
 
 <style>

img {
  border-radius: 15px;
  border: 5px solid
}
</style>
</head>

<body>
<center><h1 style="color:Orange;"> Test for Pnemonia</h1></center>
<form action="{{url_for('predict')}}" method="post" enctype="multipart/form-data">
	<center><h1 style="color:#c1b24a;">Select Image to upload:</h3> </center>
	<center><input type ="file" name="file"></center>
	<br><br>
	<center><input type ="submit" value="Upload Image" name="submit"></center>
</form>
<br>
<div>
<center><h2 style="color:IndianRed;">{{prediction_text}}</h2></center>
</div>
<br><br>
<div>
	<center>	<img src="{{ url_for('static', filename=filename) }}" width="350" height="350"></center>
	</div>

</body>
</html>
'''
file=open("templates/diseases.html","w")
file.write(diseases)
file.close()

"""# **Import Libraries**"""

from flask import Flask,render_template,request,redirect,url_for
from flask_ngrok import run_with_ngrok
from werkzeug.utils import secure_filename
import torch.nn as nn
import torch
from torchvision import transforms
from PIL import Image
import numpy as np
import os
UPLOAD_FOLDER ='/content/static'
app=Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

"""# **The CNN Model**"""

class Net(nn.Module):
  def __init__(self):
    super().__init__()
    self.conv1=nn.Conv2d(3,32,kernel_size=3,padding=1)
    self.conv1_batchnorm=nn.BatchNorm2d(num_features=32)
    self.act1=nn.ReLU()
    self.pool1=nn.MaxPool2d(2)
    self.conv1_dropout=nn.Dropout2d(p=0.2)

    self.conv2=nn.Conv2d(32,64,kernel_size=3,padding=1)
    self.conv2_batchnorm=nn.BatchNorm2d(num_features=64)
    self.act2=nn.ReLU()
    self.pool2=nn.MaxPool2d(2)
    self.conv2_dropout=nn.Dropout2d(p=0.2)

    self.conv3=nn.Conv2d(64,64,kernel_size=3,padding=1)
    self.conv3_batchnorm=nn.BatchNorm2d(num_features=64)
    self.act3=nn.ReLU()
    self.pool3=nn.MaxPool2d(2)
    self.conv3_dropout=nn.Dropout2d(p=0.2)

    self.conv4=nn.Conv2d(64,32,kernel_size=3,padding=1)
    self.conv4_batchnorm=nn.BatchNorm2d(num_features=32)
    self.act4=nn.ReLU()
    self.pool4=nn.MaxPool2d(2)
    self.conv4_dropout=nn.Dropout2d(p=0.2)

    self.fc1=nn.Linear(32*16*16,64)
    self.act5=nn.ReLU()
    self.fc2=nn.Linear(64,2)
  def forward(self,x):
    out=self.pool1(self.act1(self.conv1_batchnorm(self.conv1(x))))
    out=self.conv1_dropout(out)
    
    out=self.pool2(self.act2(self.conv2_batchnorm(self.conv2(out))))
    out=self.conv2_dropout(out)

    out=self.pool3(self.act3(self.conv3_batchnorm(self.conv3(out))))
    out=self.conv3_dropout(out)

    out=self.pool4(self.act4(self.conv4_batchnorm(self.conv4(out))))
    out=self.conv4_dropout(out)
    out=out.view(-1,32*16*16)
    
    out=self.act5(self.fc1(out))
    out=self.fc2(out)
    return out

model=Net()

"""# **Image Pre-Processing**"""

data_transforms=transforms.Compose([transforms.Grayscale(num_output_channels=3),transforms.Resize(256),transforms.ColorJitter(),transforms.RandomCrop(224),transforms.RandomHorizontalFlip(),transforms.Resize(256),transforms.ToTensor()])

"""# **Loading Weights in the Model and Applying to Cuda**"""

device="cuda"
model.load_state_dict(torch.load('model9422.pt'))
model.to(device)

model.eval()

"""# **Connecting HTML and Model**"""

run_with_ngrok(app)
@app.route('/',methods=['GET'])
def Home():
  return render_template('disease.html')
@app.route('/predict',methods=['POST'])
def predict():
  f=request.files['file']
  filename=secure_filename(f.filename)
  f.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
  fili='/content/static/'+filename
  img=Image.open(fili)
  img=data_transforms(img)
  img=img.numpy()
  img=img.astype('float32')
  img = torch.from_numpy(img)
  img=img.unsqueeze(0)
  device = torch.device("cuda")
  img=img.to(device)
  output=model(img)
  pred = torch.argmax(output, dim=1)
  pred= pred.item()
  ad = {0:'Is Normal', 1:'Has Pnemonia'}
  return render_template('diseases.html', filename="{}".format(filename),prediction_text="Person {}".format(ad[pred]))
 
if __name__=="__main__":
  app.run()

img=Image.open('/content/IM-0117-0001.jpeg')
img=data_transforms(img)
img=img.numpy()
img /= 255.0
img=img.astype('float32')
img = torch.from_numpy(img)
img=img.unsqueeze(0)
device = torch.device("cuda")
img=img.to(device)
output=model(img)
pred = torch.argmax(output, dim=1)
pred= pred.item()
ad = {0:'Is Normal', 1:'Has Pnemonia'}
print(ad[pred])

